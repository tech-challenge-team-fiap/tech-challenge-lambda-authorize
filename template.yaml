AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lambda-authorized

  API lambda-authorized

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    MemorySize: 128

    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
Resources:

  TechChallenge03UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: TechChallenge03UserPool
      Schema:
        - Name: "cpf"
          AttributeDataType: "String"
          DeveloperOnlyAttribute: false
          Mutable: true
          StringAttributeConstraints:
            MinLength: "11"
            MaxLength: "11"

  CognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: TechChallenge03UserPoolClient
      UserPoolId:
        Ref: TechChallenge03UserPool
      ExplicitAuthFlows:
        - "ALLOW_USER_SRP_AUTH"
        - "ALLOW_REFRESH_TOKEN_AUTH"
        - "ALLOW_USER_PASSWORD_AUTH"

  LambdaAuthorizedFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: LambdaAuthorizedFunction
      Handler: auth.App::handleRequest # Corrigido para refletir o pacote e a classe corretos
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          PARAM1: VALUE
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1 # More info about tiered compilation https://aws.amazon.com/blogs/compute/optimizing-aws-lambda-function-performance-for-java/
      Events:
        Authentication:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth
            Method: post

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  AuthenticationApi:
    Description: API Gateway endpoint URL for Prod stage for Authentication function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/auth/"
  LambdaAuthorizedFunction:
    Description: Authentication Lambda Function ARN
    Value: !GetAtt LambdaAuthorizedFunction.Arn
  LambdaAuthorizedFunctionIamRole:
    Description: Implicit IAM Role created for Authentication function
    Value: !GetAtt LambdaAuthorizedFunctionRole.Arn
  UserPoolId:
    Description: "The ID of the TechChallenge03 Cognito User Pool"
    Value: !Ref TechChallenge03UserPool
  UserPoolClientId:
    Description: "The ID of the Cognito User Pool Client for TechChallenge03"
    Value: !Ref CognitoUserPoolClient